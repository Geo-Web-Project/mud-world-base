// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { ImageEncodingFormat } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("geoweb"), bytes16("TrackedImageComp")));
bytes32 constant TrackedImageComponentTableId = _tableId;

struct TrackedImageComponentData {
  uint16 physicalWidthInMillimeters;
  ImageEncodingFormat encodingFormat;
  bytes imageAsset;
}

library TrackedImageComponent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT16;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.BYTES;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "physicalWidthInMillimeters";
    _fieldNames[1] = "encodingFormat";
    _fieldNames[2] = "imageAsset";
    return ("TrackedImageComponent", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get physicalWidthInMillimeters */
  function getPhysicalWidthInMillimeters(bytes32 key) internal view returns (uint16 physicalWidthInMillimeters) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get physicalWidthInMillimeters (using the specified store) */
  function getPhysicalWidthInMillimeters(
    IStore _store,
    bytes32 key
  ) internal view returns (uint16 physicalWidthInMillimeters) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set physicalWidthInMillimeters */
  function setPhysicalWidthInMillimeters(bytes32 key, uint16 physicalWidthInMillimeters) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((physicalWidthInMillimeters)));
  }

  /** Set physicalWidthInMillimeters (using the specified store) */
  function setPhysicalWidthInMillimeters(IStore _store, bytes32 key, uint16 physicalWidthInMillimeters) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((physicalWidthInMillimeters)));
  }

  /** Get encodingFormat */
  function getEncodingFormat(bytes32 key) internal view returns (ImageEncodingFormat encodingFormat) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return ImageEncodingFormat(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get encodingFormat (using the specified store) */
  function getEncodingFormat(IStore _store, bytes32 key) internal view returns (ImageEncodingFormat encodingFormat) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return ImageEncodingFormat(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set encodingFormat */
  function setEncodingFormat(bytes32 key, ImageEncodingFormat encodingFormat) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(encodingFormat)));
  }

  /** Set encodingFormat (using the specified store) */
  function setEncodingFormat(IStore _store, bytes32 key, ImageEncodingFormat encodingFormat) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(encodingFormat)));
  }

  /** Get imageAsset */
  function getImageAsset(bytes32 key) internal view returns (bytes memory imageAsset) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /** Get imageAsset (using the specified store) */
  function getImageAsset(IStore _store, bytes32 key) internal view returns (bytes memory imageAsset) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /** Set imageAsset */
  function setImageAsset(bytes32 key, bytes memory imageAsset) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((imageAsset)));
  }

  /** Set imageAsset (using the specified store) */
  function setImageAsset(IStore _store, bytes32 key, bytes memory imageAsset) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, bytes((imageAsset)));
  }

  /** Get the length of imageAsset */
  function lengthImageAsset(bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of imageAsset (using the specified store) */
  function lengthImageAsset(IStore _store, bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of imageAsset (unchecked, returns invalid data if index overflows) */
  function getItemImageAsset(bytes32 key, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of imageAsset (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemImageAsset(IStore _store, bytes32 key, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to imageAsset */
  function pushImageAsset(bytes32 key, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Push a slice to imageAsset (using the specified store) */
  function pushImageAsset(IStore _store, bytes32 key, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Pop a slice from imageAsset */
  function popImageAsset(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Pop a slice from imageAsset (using the specified store) */
  function popImageAsset(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Update a slice of imageAsset at `_index` */
  function updateImageAsset(bytes32 key, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Update a slice of imageAsset (using the specified store) at `_index` */
  function updateImageAsset(IStore _store, bytes32 key, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (TrackedImageComponentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (TrackedImageComponentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    uint16 physicalWidthInMillimeters,
    ImageEncodingFormat encodingFormat,
    bytes memory imageAsset
  ) internal {
    bytes memory _data = encode(physicalWidthInMillimeters, encodingFormat, imageAsset);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    uint16 physicalWidthInMillimeters,
    ImageEncodingFormat encodingFormat,
    bytes memory imageAsset
  ) internal {
    bytes memory _data = encode(physicalWidthInMillimeters, encodingFormat, imageAsset);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, TrackedImageComponentData memory _table) internal {
    set(key, _table.physicalWidthInMillimeters, _table.encodingFormat, _table.imageAsset);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, TrackedImageComponentData memory _table) internal {
    set(_store, key, _table.physicalWidthInMillimeters, _table.encodingFormat, _table.imageAsset);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (TrackedImageComponentData memory _table) {
    // 3 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 3));

    _table.physicalWidthInMillimeters = (uint16(Bytes.slice2(_blob, 0)));

    _table.encodingFormat = ImageEncodingFormat(uint8(Bytes.slice1(_blob, 2)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 3) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 35;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.imageAsset = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint16 physicalWidthInMillimeters,
    ImageEncodingFormat encodingFormat,
    bytes memory imageAsset
  ) internal pure returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(imageAsset).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(physicalWidthInMillimeters, encodingFormat, _encodedLengths.unwrap(), bytes((imageAsset)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
